syntax = "proto3";

package psh.proto.instance;

import "perf/perf_data.proto";

service PshService {
  rpc Heartbeat(HeartbeatReq) returns (Unit);
  rpc SendHostInfo(SendHostInfoReq) returns (Unit);
  rpc ExportData(ExportDataReq) returns (Unit);
  rpc GetTask(GetTaskReq) returns (GetTaskResp);
  rpc TaskDone(TaskDoneReq) returns (Unit);
  rpc NewInstanceId(Unit) returns (NewInstanceIdResp);
}

message Unit {}
message GetTaskReq { string instance_id = 1; }
message GetTaskResp { optional Task task = 1; }
message TaskDoneReq { string task_id = 1; }
message NewInstanceIdResp { string instance_id = 1; }

message HeartbeatReq {
  string instance_id = 1;
  bool idle = 2;
}

message Ipv6Addr {
  // high 64 bits part of big-endian ipv6 address
  fixed64 hi_64_bits = 1;
  // low 64 bits part of big-endian ipv6 address
  fixed64 lo_64_bits = 2;
}

message SendHostInfoReq {
  string instance_id = 1;

  // The following field can be empty if this request is used for heartbeat.
  // If any of them contains a value, the instance info on the server side will
  // be updated.
  optional string os = 2;
  optional string architecture = 3;
  optional string hostname = 4;
  optional string kernel_version = 5;
  optional fixed32 local_ipv4_addr = 6;  // big-endian
  optional Ipv6Addr local_ipv6_addr = 7; // big-endian
}

message Task {
  string id = 1;
  // Number of non-leap-milliseconds since Jan 1, 1970 UTC.
  uint64 end_time = 2;

  oneof task_type {
    WasmTask wasm = 3;
    ProfilingTask profiling = 4;
  }

  message WasmTask {
    bytes wasm = 1;
    repeated string wasm_args = 2;
  }

  message ProfilingTask {
    oneof process {
      Unit any = 1;
      Unit current = 2;
      uint32 pid = 3;
    }

    uint64 mmap_pages = 4;
    optional uint32 stack_depth = 5;
    oneof overflow_by {
      uint64 period = 6;
      uint64 freq = 7;
    }
  }
}

message ExportDataReq {
  string task_id = 1;

  message Data {
    oneof data_type {
      FileData file = 1;
      LineProtocolData line_protocol = 2;
      PerfDataProto perf_data = 3;
      ElfSymbol symbol = 4;
    }
  }

  repeated Data data = 2;
}

message FileData {
  bytes bytes = 1;
}

message LineProtocolData {
  bytes bytes = 1;
}

message ElfSymbol {
  string file_path = 1;
  repeated Symbol symbols = 2;
}

message Symbol {
  uint64 index = 1;
  optional string name = 2;
  uint64 address = 3;
  uint64 size = 4;
}
